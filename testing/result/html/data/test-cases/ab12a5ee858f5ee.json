{
  "uid" : "ab12a5ee858f5ee",
  "name" : "test_mul[failed]",
  "fullName" : "test_calc_new.TestCalc#test_mul",
  "historyId" : "abd4f643d0ae256885c228dcca2e70bd",
  "time" : {
    "start" : 1612272394646,
    "stop" : 1612272394647,
    "duration" : 1
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 1.0 == 0.1\n  +1.0\n  -0.1",
  "statusTrace" : "self = <testing.test_calc_new.TestCalc object at 0x7fb5dff83910>, get_calc = <python_code.calc.Calculator object at 0x7fb5dff20340>\nget_mul = [2, 0.5, 0.1]\n\n    @allure.story('测试乘法')\n    @pytest.mark.run(order=3)\n    def test_mul(self, get_calc, get_mul):\n        # 调用mul方法\n        with allure.step('计算两个数的之积'):\n            result = get_calc.mul(get_mul[0], get_mul[1])\n        # 判断如果结果为浮点数，保留两位小数\n        if isinstance(result, float):\n            result = round(result, 2)\n        # 得到结果后，设置断言\n>       assert result == get_mul[2]\nE       assert 1.0 == 0.1\nE         +1.0\nE         -0.1\n\ntest_calc_new.py:89: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_mul",
    "time" : {
      "start" : 1612272394645,
      "stop" : 1612272394646,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_calc",
    "time" : {
      "start" : 1612272394507,
      "stop" : 1612272394507,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 1.0 == 0.1\n  +1.0\n  -0.1",
    "statusTrace" : "self = <testing.test_calc_new.TestCalc object at 0x7fb5dff83910>, get_calc = <python_code.calc.Calculator object at 0x7fb5dff20340>\nget_mul = [2, 0.5, 0.1]\n\n    @allure.story('测试乘法')\n    @pytest.mark.run(order=3)\n    def test_mul(self, get_calc, get_mul):\n        # 调用mul方法\n        with allure.step('计算两个数的之积'):\n            result = get_calc.mul(get_mul[0], get_mul[1])\n        # 判断如果结果为浮点数，保留两位小数\n        if isinstance(result, float):\n            result = round(result, 2)\n        # 得到结果后，设置断言\n>       assert result == get_mul[2]\nE       assert 1.0 == 0.1\nE         +1.0\nE         -0.1\n\ntest_calc_new.py:89: AssertionError",
    "steps" : [ {
      "name" : "计算两个数的之积",
      "time" : {
        "start" : 1612272394646,
        "stop" : 1612272394646,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "get_calc::0",
    "time" : {
      "start" : 1612272394740,
      "stop" : 1612272394740,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "测试乘法"
  }, {
    "name" : "feature",
    "value" : "测试计算器"
  }, {
    "name" : "tag",
    "value" : "run(order=3)"
  }, {
    "name" : "suite",
    "value" : "test_calc_new"
  }, {
    "name" : "subSuite",
    "value" : "TestCalc"
  }, {
    "name" : "host",
    "value" : "zhangchnxudeMBP.lan"
  }, {
    "name" : "thread",
    "value" : "8501-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_calc_new"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "get_mul",
    "value" : "[2, 0.5, 0.1]"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "run(order=3)" ]
  },
  "source" : "ab12a5ee858f5ee.json",
  "parameterValues" : [ "[2, 0.5, 0.1]" ]
}